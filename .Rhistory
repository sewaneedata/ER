acs <- gsheet::gsheet2tbl("https://docs.google.com/spreadsheets/d/14fZ-1PFInHdL8OIaLUSHhc7ulFwSf9i9O32SPitCkLU/edit?usp=sharing")
# Create a vector out of the object
acs <- as.vector(unlist(acs$'ICD_10_code'))
# Make vector readable by grepl()
acs <- paste0( acs, collapse = "|^" )
acs <- paste0("^", acs) # This adds the "^" to the first value, b/c it didn't do it in
## NON EMERGENT codes vector:
# Do the exact same as we did for ACSC codes vector
non_emerg <- gsheet::gsheet2tbl("https://docs.google.com/spreadsheets/d/14m7RGYPh17lv1EQ5Tv9gbpj1kvzlVmeUQRZs0MkUyUw/edit#gid=0")
non_emerg <- as.vector(unlist(non_emerg$'ICD_10_code'))
non_emerg <- paste0( non_emerg, collapse = "|^" )
non_emerg <- paste0("^", non_emerg)
# Make an empty vector:
mental <- c()
# Fill with
for(code in 01:99){
if (code < 10){ #here we had to do an if else statement so that the vector would say
# F01, F02, etc, instead of F1, F2, etc.
new_value <- paste('F0', as.character(code), sep = "")
}
else{
new_value <- paste('F', as.character(code), sep = "")
}
mental <- c(mental, new_value)
}
# now do paste0 function same as ACSC & NON EMERGENT vectors
mental <- paste0( mental, collapse = "|^" )
mental <- paste0("^", mental)
## SUBSTANCE ABUSE codes vector
sub_abuse <- c()
for(code in 11:19){
new_value <- paste('F', as.character(code), sep = "")
sub_abuse <- c(sub_abuse, new_value)
}
sub_abuse <- paste0( sub_abuse, collapse = "|^" )
sub_abuse <- paste0("^", sub_abuse)
dental <- gsheet::gsheet2tbl("https://docs.google.com/spreadsheets/d/1m2ifrfx9yczoLSTzlOwOuxoqXpEk8LNHa2MbhC6m-AQ/edit?usp=sharing")
dental <- as.vector(unlist(dental$'ICD_10_code'))
dental <- paste0( dental, collapse = "|^" )
# What percentage of all visits to the ER had a primary diagnosis of ACSC?
scp %>%
group_by(acs_primary) %>%
tally %>%
mutate(total = sum(n)) %>%
group_by(acs_primary, n, total) %>%
summarise(perc = n/total*100)
scp <- scp %>%
drop_na(Patient_Sex) %>%
mutate(acs_primary = grepl(acs, Diag1),
nonemerg_primary = grepl(non_emerg, Diag1),
mental_primary = grepl(mental, Diag1),
subabuse_primary = grepl(sub_abuse, Diag1),
dental_primary = grepl(dental, Diag1),
age_group = cut(Age,
breaks = 10,
labels = c('0-9', '10-19', '20-29', '30-39', '40-49',
'50-59', '60-69', '70-79', '80-89', '90-99')))
# What percentage of all visits to the ER had a primary diagnosis of ACSC?
scp %>%
group_by(acs_primary) %>%
tally %>%
mutate(total = sum(n)) %>%
group_by(acs_primary, n, total) %>%
summarise(perc = n/total*100)
# What percentage of all visits to the ER had a primary diagnosis of ACSC?
perc_acsc <- scp %>%
group_by(acs_primary) %>%
tally %>%
mutate(total = sum(n)) %>%
group_by(acs_primary, n, total) %>%
summarise(perc = n/total*100)
# What percentage of all visits to the ER had a primary diagnosis of ACSC?
perc_acsc <- scp %>%
group_by(acs_primary) %>%
tally %>%
mutate(total = sum(n)) %>%
group_by(acs_primary, n, total) %>%
summarise(perc = n/total*100)
# Shows non emergent trends
perc_nonemerg <- scp %>%
group_by(nonemerg_primary) %>%
tally %>%
mutate(total = sum(n)) %>%
group_by(nonemerg_primary, n, total) %>%
summarise(perc = n/total*100)
# What percentage of all visits to the ER had a primary diagnosis of mental health?
perc_mental <- scp %>%
group_by(mental_primary) %>%
tally %>%
mutate(total = sum(n)) %>%
group_by(mental_primary, n, total) %>%
summarise(perc = n/total*100)
# What percentage of all visits to the ER had a primary diagnosis of dental?
perc_dental <- scp %>%
group_by(dental_primary) %>%
tally %>%
mutate(total = sum(n)) %>%
group_by(dental_primary, n, total) %>%
summarise(perc = n/total*100)
# What percentage of all visits to the ER had a primary diagnosis of substance abuse?
perc_subabuse <- scp %>%
group_by(subabuse_primary) %>%
tally %>%
mutate(total = sum(n)) %>%
group_by(subabuse_primary, n, total) %>%
summarise(perc = n/total*100)
shiny::runApp('DataLabShiny/Movies/Movies')
runApp('DataLabShiny/Movies/Movies')
source("~/DataLab/ER/KenBrainStorm.R", echo=TRUE)
source("~/DataLab/ER/KenBrainStorm.R", echo=TRUE)
View(perc_acsc)
View(I10)
View(I10)
grundy_zip <- c("A", "B", "C", "D", "K", "F", "L", "N")
frank_zip <- c("E", "J", "M")
marion_zip <- c("I", "G", "H")
county = ifelse(Patient_Zip %in% grundy_zip,
ifelse( Patient_Zip %in% frank_zip,
county = ifelse(Patient_Zip %in% grundy_zip,
scp <- scp %>%
scp <- scp %>%
scp <- scp %>%
drop_na(Patient_Sex) %>%
mutate(acs_primary = grepl(acs, Diag1),
nonemerg_primary = grepl(non_emerg, Diag1),
mental_primary = grepl(mental, Diag1),
subabuse_primary = grepl(sub_abuse, Diag1),
dental_primary = grepl(dental, Diag1),
age_group = cut(Age,
breaks = 10,
labels = c('0-9', '10-19', '20-29', '30-39', '40-49',
'50-59', '60-69', '70-79', '80-89', '90-99')),
county = ifelse(Patient_Zip %in% grundy_zip,
"Grundy",
ifelse( Patient_Zip %in% frank_zip,
"Franklin",
ifelse(Patient_Zip %in% marion_zip,
"Marion",
"NULL")
)))
grundy_zip <- c("A", "B", "C", "D", "K", "F", "L", "N")
frank_zip <- c("E", "J", "M")
grundy_zip <- c("A", "B", "C", "D", "K", "F", "L", "N")
frank_zip <- c("E", "J", "M")
marion_zip <- c("I", "G", "H")
scp <- scp %>%
drop_na(Patient_Sex) %>%
mutate(acs_primary = grepl(acs, Diag1),
nonemerg_primary = grepl(non_emerg, Diag1),
mental_primary = grepl(mental, Diag1),
subabuse_primary = grepl(sub_abuse, Diag1),
dental_primary = grepl(dental, Diag1),
age_group = cut(Age,
breaks = 10,
labels = c('0-9', '10-19', '20-29', '30-39', '40-49',
'50-59', '60-69', '70-79', '80-89', '90-99')),
county = ifelse(Patient_Zip %in% grundy_zip,
"Grundy",
ifelse( Patient_Zip %in% frank_zip,
"Franklin",
ifelse(Patient_Zip %in% marion_zip,
"Marion",
"NULL")
)))
# Run the following to add a new column that says Race in characters rather than values:
# 1. Make a vector of names (in order, 1 = white, 2 = Black, etc)
races_vec <- c("White", "Black", "Native American")
# Create the new column
scp <- scp %>%
mutate(Race_Chr = ifelse(Race == 9, "Unkown", races_vec[Race]))
View(ER)
View(acs_grundy_a)
observe({
rv$conditions <- scp %>%
fitler(county %in% input$county,
Primary_Payer_Class_Cd %in% input$insurance,
Patient_Zip %in% input$zip) %>%
group_by (Diag1) %>%
})
observe({
rv$conditions <- scp %>%
fitler(county %in% input$county,
Primary_Payer_Class_Cd %in% input$insurance,
Patient_Zip %in% input$zip) %>%
group_by (Diag1)
})
observe({
rv$conditions <- scp %>%
fitler(county %in% input$county,
Primary_Payer_Class_Cd %in% input$insurance,
Patient_Zip %in% input$zip) %>%
group_by (Diag1)
})
runApp('DataLabShiny/Movies/Movies')
library(shiny)
library(bslib)
library(markdown)
library(shinydashboard)
library(readr)
library(dplyr)
library(ggplot2)
library(DT)
library(leaflet)
library(shiny)
library(bslib)
library(markdown)
library(readr)
library(dplyr)
library(ggplot2)
library(DT)
library(leaflet)
install.packages("bslib")
install.packages("bslib")
library(shiny)
library(markdown)
library(readr)
library(dplyr)
library(ggplot2)
library(DT)
library(leaflet)
##SERVER:
# Define server logic required to draw a histogram
server <- function(input, output) {
# Create reactive values
rv <- reactiveValues()
observe({
rv$conditions <- scp %>%
fitler(county %in% input$county,
Primary_Payer_Class_Cd %in% input$insurance,
Patient_Zip %in% input$zip) %>%
group_by (Diag1)
})
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Create reactive values
rv <- reactiveValues()
observe({
rv$conditions <- scp %>%
fitler(county %in% input$county,
Primary_Payer_Class_Cd %in% input$insurance,
Patient_Zip %in% input$zip) %>%
group_by (Diag1)
})
View(rv)
##SERVER:
# Define server logic required to draw a histogram
server <- function(input, output) {
# Create reactive values
rv <- reactiveValues()
observe({
rv$conditions <- scp %>%
fitler(county %in% input$county,
Primary_Payer_Class_Cd %in% input$insurance,
Patient_Zip %in% input$zip) %>%
group_by (Diag1) %>%
tally() %>%
head(10) %>%
ungroup() %>%
group_by(Diag1) %>%
summarise(percentage = (n/sum(n))*100, across(everything()))
})
########################################################################################################################################################################################################
########################################################################################################################################################################################################
##OUTPUTS:
output$condition_plot <- renderPlot({
ggplot(data = rv$conditions,
aes(x= ))
})
}
# Create reactive values
rv <- reactiveValues()
rv <- reactiveValues()
observe({
rv$conditions <- scp %>%
fitler(county %in% input$county,
Primary_Payer_Class_Cd %in% input$insurance,
Patient_Zip %in% input$zip) %>%
group_by(Diag1) %>%
tally() %>%
head(5) %>%
ungroup() %>%
group_by(Diag1) %>%
summarise(percentage = (n/sum(n))*100, across(everything()))
conditions <- scp %>%
fitler(county,
Primary_Payer_Class_Cd,
Patient_Zip) %>%
group_by(Diag1) %>%
tally() %>%
head(5) %>%
ungroup() %>%
group_by(Diag1) %>%
summarise(percentage = (n/sum(n))*100, across(everything()))
conditions <- scp %>%
fitler(county,
Primary_Payer_Class_Cd,
Patient_Zip) %>%
group_by(Diag1) %>%
tally() %>%
head(5) %>%
ungroup() %>%
group_by(Diag1) %>%
summarise(percentage = (n/sum(n))*100, across(everything()))
conditions <- scp %>%
fitler(county,
Primary_Payer_Class_Cd,
Patient_Zip) %>%
group_by(Diag1) %>%
tally() %>%
head(5) %>%
ungroup() %>%
group_by(Diag1) %>%
summarise(percentage = (n/sum(n))*100, across(everything()))
conditions <- scp %>%
fitler(county,
Primary_Payer_Class_Cd,
Patient_Zip) %>%
group_by(Diag1) %>%
tally() %>%
head(5) %>%
ungroup() %>%
group_by(Diag1) %>%
summarise(percentage = (n/sum(n))*100, across(everything()))
conditions <- scp %>%
fitler(county,
Primary_Payer_Class_Cd,
Patient_Zip) %>%
group_by(Diag1) %>%
tally() %>%
head(5) %>%
ungroup() %>%
group_by(Diag1) %>%
summarise(percentage = (n/sum(n))*100, across(everything()))
conditions <- scp %>%
fitler(county,
Primary_Payer_Class_Cd,
Patient_Zip) %>%
group_by(Diag1) %>%
tally() %>%
head(5) %>%
ungroup() %>%
group_by(Diag1) %>%
summarise(percentage = (n/sum(n))*100, across(everything()))
source("~/DataLab/ER/KenBrainStorm.R", echo=TRUE)
conditions <- scp %>%
filter(county,
Primary_Payer_Class_Cd,
Patient_Zip) %>%
group_by(Diag1) %>%
tally() %>%
head(5) %>%
ungroup() %>%
group_by(Diag1) %>%
summarise(percentage = (n/sum(n))*100, across(everything()))
conditions <- scp %>%
filter(county&
Primary_Payer_Class_Cd&
Patient_Zip) %>%
group_by(Diag1) %>%
tally() %>%
head(5) %>%
ungroup() %>%
group_by(Diag1) %>%
summarise(percentage = (n/sum(n))*100, across(everything()))
conditions <- scp %>%
group_by(county,Diag1) %>%
tally() %>%
head(5) %>%
ungroup() %>%
group_by(Diag1) %>%
summarise(percentage = (n/sum(n))*100, across(everything()))
View(conditions)
conditions <- scp %>%
group_by(county,Diag1) %>%
tally() %>%
arrange(desc(n))
View(conditions)
conditions <- scp %>%
group_by(county,Diag1) %>%
tally() %>%
arrange(desc(n))%>%
ungroup() %>%
group_by(Diag1) %>%
summarise(percentage = (n/sum(n))*100, across(everything()))
county_conditions <- scp %>%
group_by(county,Diag1) %>%
tally() %>%
arrange(desc(n))
View(county_conditions)
View(conditions)
# How many total ER visits did patients from Marion county come in for?
marion_visits <- scp %>%
filter(county== Marion, ER_Record_Flag== Y) %>%
tally()
# How many total ER visits did patients from Marion county come in for?
marion_visits <- scp %>%
filter(county== 'Marion'', ER_Record_Flag== 'Y') %>%
tally()
conditions <- scp %>%
group_by(county,Diag1) %>%
tally() %>%
arrange(desc(n))%>%
ungroup() %>%
group_by(Diag1) %>%
summarise(percentage = (n/sum(n))*100, across(everything()))
# How many total ER visits did patients from Marion county come in for?
marion_visits <- scp %>%
filter(county== 'Marion', ER_Record_Flag== 'Y') %>%
tally()
View(marion_visits)
# What are the top ICD 10 codes of that number? Percentage wise
marion_icd_perc <- scp %>%
filter(county== 'Marion', ER_Record_Flag == 'Y') %>%
group_by(Diag1) %>%
tally()
View(marion_icd_perc)
# What are the top ICD 10 codes of that number? Percentage wise
marion_icd_perc <- scp %>%
filter(county== 'Marion', ER_Record_Flag == 'Y') %>%
group_by(Diag1) %>%
tally() %>%
arrange(desc(n))
source("~/DataLab/ER/KenBrainStorm.R", echo=TRUE)
scp %>%
filter(ER_Record_Flag == 'Y') %>%
group_by(county) %>%
tally() %>%
ungroup()
tally()
# How many total ER visits did patients from each county?
county_visits <- scp %>%
filter(ER_Record_Flag== 'Y') %>%
group_by(county) %>%
tally()
View(county_visits)
# Make a column of total ER visits by county
scp <- scp %>%
mutate(county_total=county_visits[county])
# Make a column of total ER visits by county
scp %>%
join(county_visits, county)
library(readr)
library(tidyverse)
library(ggplot2)
library(dplyr)
# Make a column of total ER visits by county
scp %>%
join(county_visits, county)
install.packages("plyr")
library(plyr)
# Make a column of total ER visits by county
scp %>%
join(county_visits, county)
# Make a column of total ER visits by county
join(scp, county_visits, county)
# Make a column of total ER visits by county
join(scp, county_visits, by= county)
# Make a column of total ER visits by county
join(scp, county_visits, by= 'county')
# Make a column of total ER visits by county
scp <- join(scp, county_visits, by= 'county')
# Make a column of total ER visits by county
scp <- join(scp, county_visits, by= 'county') %>%
rename(n=county_total))
# Make a column of total ER visits by county
scp <- join(scp, county_visits, by= 'county') %>%
rename(n=county_total)
# Make a column of total ER visits by county
scp <- join(scp, county_visits, by= 'county') %>%
rename(n== county_total)
# Make a column of total ER visits by county
scp <- join(scp, county_visits, by= 'county') %>%
dplyr::(n=county_total)
# Make a column of total ER visits by county
scp <- join(scp, county_visits, by= 'county') %>%
dplyr::rename(n=county_total)
# Make a column of total ER visits by county
scp <- join(scp, county_visits, by= 'county') %>%
dplyr::rename(county_total= n)
scp(names)
scp %>%
names(col)
scp %>%
n(col)
scp %>%
col(names)
scp %>%
colnames
# Make a column of total ER visits by county
scp <- join(scp, county_visits, by= 'county') %>%
dplyr::rename(county_total= 'n')
# What percentage of all visits to the ER had a primary diagnosis of dental?
perc_dental <- scp %>%
group_by(dental_primary) %>%
tally %>%
mutate(total = sum(n)) %>%
group_by(dental_primary, n, total) %>%
summarise(perc = n/total*100)
View(perc_mental)
View(marion_visits)
source("~/DataLab/ER/KenBrainStorm.R", echo=TRUE)
library(readr)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(plyr)
